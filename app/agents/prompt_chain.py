from app.agents.analyser import analyze_repo
from app.agents.steps.plan_changes import plan_changes
from app.agents.steps.apply_edits import apply_edits
from app.agents.llm_utils import call_llm
import re
from typing import List, Dict

def run_prompt_chain(repo_path: str, prompt: str) -> Dict[str, object]:
    """
    Runs the full agent chain: analyze -> plan -> apply.

    Args:
        repo_path (str): Local path to the cloned Git repository.
        prompt (str): User input describing the desired change.

    Returns:
        dict: Contains the repository summary, plan generated by the agent, and list of modified files.
    """
    summary = analyze_repo(repo_path)
    plan = plan_changes(summary, prompt, call_llm)
    modified_files = apply_edits(repo_path, plan, call_llm)

    return {
        "summary": summary,
        "plan": plan,
        "modified_files": modified_files
    }

def extract_files_from_plan(plan: str) -> List[str]:
    """
    Extracts Python file paths mentioned in the agent's plan text.

    Args:
        plan (str): Agent-generated plan text.

    Returns:
        list[str]: List of unique Python filenames referenced in the plan.
    """
    patterns = [
        r"- ([\w./\\]+\.py)",   # Matches lines like "- somefile.py"
        r"([\w./\\]+\.py):",    # Matches lines like "somefile.py:"
        r"`([\w./\\]+\.py)`",   # Matches backtick-wrapped filenames
    ]

    files = []
    for pattern in patterns:
        files.extend(re.findall(pattern, plan))

    return list(dict.fromkeys(files))  # Deduplicate, preserve order

def get_change_for_file(file: str, plan: str) -> str:
    """
    Extracts the proposed changes for a given file from the plan text.

    Args:
        file (str): Filename to search for in the plan.
        plan (str): The full agent-generated plan text.

    Returns:
        str: Text block describing changes for the given file.
    """
    lines = plan.splitlines()
    changes = []
    capture = False

    for line in lines:
        stripped = line.strip()
        # Start capturing lines if the current one matches the filename
        if file in line and (stripped.startswith(f"- {file}") or stripped.startswith(f"{file}:")):
            capture = True
            changes.append(line)
        elif capture:
            # Stop if another file starts or section shifts
            if (stripped.startswith("- ") and ".py" in line and file not in line) or \
               (stripped.endswith(".py:") and file not in line):
                break
            changes.append(line)

    return "\n".join(changes) if changes else f"No specific change found for `{file}`."
